---
title: "gProfiler (MOV10)"
execute:
    warning: false
    message: false
    echo: true
format: html
---

[**gProfileR**](https://biit.cs.ut.ee/gprofiler/gost) es otra herramienta para realizar análisis de sobrerepresentación (ORA), similar a **clusterProfiler**. **gProfileR** considera multiples fuentes, incluidos los términos GO. Los términos GO resultantes son en general similares a los conseguidos con **clusterProfiler**, pero pude haber diferecias debido a los algoritmos usados.

## Usando gProfileR

```{r}
#| label: load-packages
library(gprofiler2)

```
Cargamos los datos correspondientes a los genes DGE, y los ordenamos por FC
```{r}
#| label: Cargar-datos

df.fc <- read.csv('../rnaseq/deseq/data/resultado.csv')
df.fc <- df.fc[order(df.fc$log2FoldChange, decreasing = TRUE), ]

padj.cutoff <- 0.05
lfc.cutoff <- log2(1.5)

genes.up <- df.fc$X[df.fc$log2FoldChange >= lfc.cutoff & df.fc$padj <= padj.cutoff]
genes.down <- df.fc$X[df.fc$log2FoldChange <= -1 * lfc.cutoff & df.fc$padj <= padj.cutoff]

genes.dge <- c(genes.up, genes.down)
allgenes <- df.fc$X
```
```{r}
#| label: ejecutar-gprofiler

gost.res <- gost(query = genes.dge,
                organism = 'hsapiens',
                ordered_query = TRUE,
                correction_method = 'fdr',
                custom_bg = allgenes,
                highlight = TRUE
                )

head(gost.res$result, 3)
```
### Visualizando resultados

```{r}
#| label: gprofiler-plot

gostplot(gost.res, capped = TRUE, interactive = TRUE)
```

```{r}
#| label: link
gost.link <- gost(query = genes.dge,
                organism = 'hsapiens',
                ordered_query = TRUE,
                correction_method = 'fdr',
                custom_bg = allgenes,
                highlight = TRUE, 
                as_short_link = TRUE
                )

gost.link
```

## REVIGO
[**REVIGO**](http://revigo.irb.hr/) es una herramienta web que resume graficamente la lista de términos GO déspues de eliminar los terminos redundantes.

```{r}
#| label: REVIGO

gprofiler_results <- gost.res$result[order(gost.res$result$p_value, decreasing = TRUE),]
gprofiler_results <- gprofiler_results[grep('GO:', gprofiler_results$term_id), ]

GO.pval <- gprofiler_results[, c('term_id', 'p_value')]

write.table(GO.pval, "GOs_oe.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)

head(GO.pval)
```

Abrimos el fichero 'GOs_oe.txt' y copiamos y pegamos su contenido en la web de [**REVIGO**](http://revigo.irb.hr/).

### Procesos biológicos
![Biological Process](../assets/BP.png){width=60% fig-align="center"}

### Componentes celulares
![Cellular Components](../assets/CC.png){width=60% fig-align="center"}

### Funciones moleculares
![Molecular Functions](../assets/MF.png){width=60% fig-align="center"}

## Referencias

> Harvard Chan Bioinformatics Core(HBC)
>https://github.com/hbctraining/DGE_workshop/tree/master

> g:Profiler: https://biit.cs.ut.ee/gprofiler/page/r

> REVIGO: http://revigo.irb.hr/