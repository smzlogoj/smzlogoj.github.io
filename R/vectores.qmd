---
title: "Vectores"
format: 
    html:
     number-sections: false
---

Un vector almacena una secuencia de valore simples del misma clase. Es decir, todos sus elementos son del mismo tipo de dato simple.

## Crear un vector
La forma más habitual de crear un vector es usando la función **c()** (combine). Tambien podemos usar las funciones **seq()**

```{r}
#| label: create-vectores

vector_numeros <- c(2, 4, 6, 8)

vector_numeros

seq_numeros <- seq(2, 6)
seq_numeros

seq_numeros2 <- 2:6
seq_numeros2

seq_numeros3 <- seq(2, 6, by = 0.5)
seq_numeros3
```
La función **c()** permite añadir elementos a un vector existente, o combinar dos vectores

```{r}
#| label: combine-vector

vector_numeros2 <- c(1, 3, 5)
vector_numeros2 <- c(vector_numeros2, 7)

vector_numeros2

comb_vector <- c(vector_numeros, vector_numeros2)
comb_vector

vector_caracteres <- c('A', 'B', 'C')
vector_caracteres


vector_logico <- c(TRUE, FALSE, TRUE)
vector_logico

vector_logico2 <- 10 == 5
vector_logico2
```
La función **rep()** permite construir vectores a partir de la repetición de otro vector.
```{r}
letras <- c('A', 'B', 'C')
letras

letras_rep <- rep(letras, times = 3)
letras_rep

letras_rep2 <- rep(letras, each = 3)
letras_rep2
```
## Aritmética de vectores

Las operaciones aritméticas con vectores se hacen posición a posición.

```{r}
vector_numeros <- seq(10, 50, by = 5)
vector_numeros

vector_numeros + 1

vector_numeros / 2
```

Dos vectores:
```{r}
vector_numeros_1 <- c(1, 2, 3, 4)
vector_numeros_2 <- c(1, 1, 0, 0)

vector_numeros_1 + vector_numeros_2
vector_numeros_1 - vector_numeros_2
vector_numeros_1 * vector_numeros_2
vector_numeros_1 / vector_numeros_2
```
Se puede observar que en el resultado de la operación anterior en el vector resultante aparecen los valores **Inf**, es debido a que la división por 0 es indefinida (Infinito).

Dos vectores, diferente longitud:
```{r}
vector_numeros_1 <- c(1, 2, 3, 4, 5, 6)
vector_numeros_2 <- c(1, 1, 0)

vector_numeros_1 + vector_numeros_2
vector_numeros_1 - vector_numeros_2
vector_numeros_1 * vector_numeros_2
vector_numeros_1 / vector_numeros_2
```
Lo que hace R es concatenar el vector de menor longitud consigo mísmo hasta rellenar los huecos hasta la longitud del mayor.

::: {.callout-important}
Es mejor evitar las operaciones con objetos de diferente longitud. 
:::

Vector númerico y vector de texto.
```{r}
letras <- c('A', 'B', 'C', 'D')
numeros <- c(1, 2, 3, 4, 5)

resultado = paste(letras, numeros, sep="-")
resultado
```
La función **paste()** que concatena texto, pero numeros es un vector númerico. Internamente *paste()* llama a la función *as.character()* que convierte el tipo númerico a tipo texto.

```{r}
numeros <- c(1, 2, 3, 4, 5)
numeros
texto_numeros <- as.character(numeros)
texto_numeros
```
## Elementos de un vector

Para poder manipular los elementos contenidos en un vector vamos a hacerlo usando los corchetes ([]) de la forma **vector[ ]**

```{r}
numeros <- 10:20
numeros
```
Obtener el elemento en la posicion cuarta
```{r}
numeros[4]
```
Obterner todos los elementos menos el de la cuarta posicion

```{r}
numeros[-4]

numeros[c(4, 8)]
numeros[c(4:8)]
numeros[-c(4:8)]
```

Eliminar los elementos de la posicion 1 y 5
```{r}
numeros <- 10:20
numeros
numeros <- numeros[-c(1, 5)]
numeros
```
Añadir elementos nuevos.
```{r}
numeros
numeros <- c(numeros, c(50, 100))
numeros
```
::: {.callout-note}
En definitiva lo que estamos haciendo es usar vectores índices para seleccionar elementos del vector.

**vector[vector_indice]**
:::

## Ordenar un vector

En ocasiones nos puede interesar ordenar los elementos de un vector. Esto se puede realizar con la función **order()**

```{r}
numeros
order(numeros, decreasing = TRUE)
```
La función order devuelve el índice del vector ordenado, (no los valores). 
```{r}
numeros[order(numeros, decreasing = TRUE)]
```
## Máscara lógica
Otra manera de seleccionar los elementos de un vector es usar una máscara lógica (vector de valores lógicos). De la manera **vector[mascara_logica]**

```{r}
numeros <- 10:20
numeros

numeros < 15

numeros[numeros <15]
```

## Vectores con nombres
En ocasiones puede ser interesante poner *nombre* a las posiciones de un vector.

```{r}
log2FoldChange <- c(-5.3823, -1.2634, -1.0972, -1.0904, -0.9888, -0.9792)

log2FoldChange

ensembles <- c('ENSMUSG00000020000', 
               'ENSMUSG00000060036', 
               'ENSMUSG00000060613', 
               'ENSMUSG00000038092', 
               'ENSMUSG00000020926', 
               'ENSMUSG00000001435')
ensembles

names(log2FoldChange) <- ensembles

log2FoldChange

log2FoldChange['ENSMUSG00000060613']
log2FoldChange[c('ENSMUSG00000060613', 'ENSMUSG00000001435')]
```

## Referencias

> [An Introduction to R](https://cran.r-project.org/doc/manuals/r-release/R-intro.html)